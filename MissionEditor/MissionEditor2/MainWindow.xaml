<Window x:Class="MissionEditor2.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:MissionEditor2"
    xmlns:tk="clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit" xmlns:ad="clr-namespace:AvalonDock;assembly=AvalonDock"
    xmlns:ml="clr-namespace:CMissionLib;assembly=CMissionLib" xmlns:Actions="clr-namespace:CMissionLib.Actions;assembly=CMissionLib" Title="{Binding Mission.Name, RelativeSource={RelativeSource Self}}"
    Height="600" Width="1000" Name="window" DataContext="{Binding RelativeSource={RelativeSource Self}}" WindowState="Maximized" Loaded="window_Loaded">

  <Window.Resources>

    <local:LogicTemplateSelector x:Key="logicTemplateSelector" />
    <local:TranslateConverter x:Key="translateConverter" />
    <local:ZoomConverter x:Key="log10Converter" />
    <local:CsvConverter x:Key="csvConverter" />
    <local:LogicGroupConverter x:Key="logicGroupConverter" />
    <local:LogicCategoryConverter x:Key="logicCategoryConverter" />
    <local:LogicGroupHeaderSelector x:Key="logicGroupHeaderSelector" />

    <Style TargetType="GroupBox">
      <Setter Property="Margin" Value="5" />
      <Setter Property="Padding" Value="5" />
    </Style>

    <Style TargetType="Image">
      <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style TargetType="Border">
      <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style TargetType="tk:DataGrid">
      <Setter Property="IsSynchronizedWithCurrentItem" Value="True" />
      <Setter Property="Background" Value="White" />
    </Style>

    <Style TargetType="ad:DockableContent">
      <Setter Property="Background" Value="White" />
      <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <ItemsPanelTemplate x:Key="orderMap_transparentMapTemplate">
      <Canvas Background="Transparent" MinHeight="{Binding ElementName=window, Path=Mission.Map.Texture.Height}"
          MinWidth="{Binding ElementName=window, Path=Mission.Map.Texture.Height}" Loaded="TransparentCanvasLoaded">
        <Canvas.LayoutTransform>
          <ScaleTransform ScaleX="{Binding Path=Value, ElementName=zoomSlider, Converter={StaticResource log10Converter}}"
              ScaleY="{Binding Path=Value, ElementName=zoomSlider, Converter={StaticResource log10Converter}}" />
        </Canvas.LayoutTransform>
      </Canvas>
    </ItemsPanelTemplate>

    <!-- ======== GiverOrdersAction Template ======== -->

    <Style x:Key="orderMap_orderStyle" TargetType="ListBoxItem">
      <Setter Property="Canvas.Left"
          Value="{Binding X, Converter={StaticResource translateConverter}, ConverterParameter=-4, FallbackValue=-100}" />
      <Setter Property="Canvas.Top"
          Value="{Binding Y, Converter={StaticResource translateConverter}, ConverterParameter=-2, FallbackValue=-100}" />
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type ListBoxItem}">
            <Viewbox Width="8" Height="4">
              <Grid>
                <Ellipse x:Name="border" Margin="-10" Stroke="Blue" StrokeThickness="2" PreviewMouseDown="OrderMouseDown" Fill="White"
                    Opacity="0.5" Cursor="SizeAll" />
                <ContentPresenter PreviewMouseDown="OrderMouseDown" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    HorizontalAlignment="Center" VerticalAlignment="Center" />
              </Grid>
            </Viewbox>
            <ControlTemplate.Triggers>
              <Trigger Property="IsSelected" Value="true">
                <Setter Property="Stroke" TargetName="border" Value="Red" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

    <ListBox x:Key="orderTypeListBox" Tag="orderTypeListBox" IsSynchronizedWithCurrentItem="True">
      <ListBoxItem IsSelected="True">Move</ListBoxItem>
      <ListBoxItem>Patrol</ListBoxItem>
      <ListBoxItem>Stop</ListBoxItem>
      <ListBoxItem>Fight</ListBoxItem>
      <ListBoxItem>Attack</ListBoxItem>
      <ListBoxItem>Enable Repeat Mode</ListBoxItem>
      <ListBoxItem>Disable Repeat Mode</ListBoxItem>
    </ListBox>

    <CollectionViewSource x:Key="logicView" Source="{Binding Mission.AllLogic}">
      <CollectionViewSource.GroupDescriptions>
        <PropertyGroupDescription PropertyName="This" Converter="{StaticResource logicGroupConverter}" />
        <PropertyGroupDescription PropertyName="This" Converter="{StaticResource logicCategoryConverter}" />
      </CollectionViewSource.GroupDescriptions>
    </CollectionViewSource>

    <tk:DataGrid x:Key="ordersListBox" Grid.Row="1" ItemsSource="{Binding Source={StaticResource logicView}, Path=/Orders}"
        AutoGenerateColumns="False" CanUserSortColumns="False" Background="White">
      <tk:DataGrid.Columns>
        <tk:DataGridTextColumn Binding="{Binding Name}" IsReadOnly="True" Header="Type" />
        <tk:DataGridTextColumn Binding="{Binding X, StringFormat=#, FallbackValue=n/a }" Header="X" />
        <tk:DataGridTextColumn Binding="{Binding Y, StringFormat=#, FallbackValue=n/a }" Header="Y" />
      </tk:DataGrid.Columns>
    </tk:DataGrid>

    <DataTemplate x:Key="giveOrdersActionTemplate">
      <ad:DockingManager>
        <ad:ResizingPanel Orientation="Horizontal">
          <ad:ResizingPanel Orientation="Vertical" ad:ResizingPanel.ResizeWidth="150">
            <ad:DockablePane ad:ResizingPanel.ResizeHeight="139">
              <ad:DockableContent Title="Help">
                <ScrollViewer Background="White">
                  <TextBlock TextWrapping="WrapWithOverflow">
                    The orders are given to units that are are part of one of the selected groups. If no group is selected, all units created in this trigger so far are given the orders.
                    <LineBreak />
                    Delete orders by selecting them in the orders list and pressing the delete key.
                    <LineBreak />
                    If you want to give different sets of orders to different units, create more Give Orders actions.
                    <LineBreak />
                    You can add units to groups by editing the group column of the unit list in the Create Units display or by right-clicking on the unit icons.
                    <LineBreak />
                    Separate multiple groups with commas and no spaces.
                  </TextBlock>
                </ScrollViewer>
              </ad:DockableContent>
              <ad:DockableContent Title="Groups">
                <ListBox ItemsSource="{Binding Mission.AllGroups, ElementName=window}" SelectionMode="Multiple" MaxHeight="200"
                    Loaded="OrderGroupsListLoaded" />
              </ad:DockableContent>
              <ad:DockableContent Title="Order Type" Content="{Binding Source={StaticResource orderTypeListBox}}" />
            </ad:DockablePane>
            <ad:DockablePane>
              <ad:DockableContent Title="Order List" Content="{Binding Source={StaticResource ordersListBox}}" />
            </ad:DockablePane>
          </ad:ResizingPanel>
          <ScrollViewer HorizontalScrollBarVisibility="Auto">
            <Grid>
              <Canvas DataContext="{Binding Mission.Map.Texture, ElementName=window}" MinHeight="{Binding Height}"
                  MinWidth="{Binding Width}" Loaded="OrderLineCanvasLoaded">
                <Canvas.LayoutTransform>
                  <ScaleTransform ScaleX="{Binding Value, ElementName=zoomSlider, Converter={StaticResource log10Converter}}"
                      ScaleY="{Binding Value, ElementName=zoomSlider, Converter={StaticResource log10Converter}}" />
                </Canvas.LayoutTransform>
                <Canvas.Background>
                  <ImageBrush AlignmentX="Left" AlignmentY="Top" Stretch="None" ImageSource="{Binding}" />
                </Canvas.Background>
              </Canvas>
              <ListBox ItemsSource="{Binding Orders}" ItemContainerStyle="{StaticResource orderMap_orderStyle}" SelectionMode="Extended"
                  ItemsPanel="{StaticResource orderMap_transparentMapTemplate}" Background="Transparent"
                  IsSynchronizedWithCurrentItem="True" ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                  ScrollViewer.VerticalScrollBarVisibility="Disabled" />
            </Grid>
          </ScrollViewer>
        </ad:ResizingPanel>
      </ad:DockingManager>
    </DataTemplate>

    <!-- ======== ShowConsoleMessage Template ======== -->

    <DataTemplate x:Key="showConsoleMessageTemplate">
      <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <GroupBox Header="Settings">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Label Grid.Row="1">Message</Label>
            <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding Message, UpdateSourceTrigger=PropertyChanged}" />
          </Grid>
        </GroupBox>
        <GroupBox Grid.Row="1" Header="Description">
          This action displays a message the chat area.
        </GroupBox>
      </Grid>
    </DataTemplate>

    <!-- ======== GameStartedCondition Template ======== -->

    <DataTemplate x:Key="gameStartedConditionTemplate">
      <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"> This condition is met when the game starts.</TextBlock>
    </DataTemplate>

    <!-- ======== TimeCondition Template ======== -->

    <DataTemplate x:Key="timeConditionTemplate">
      <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Label Grid.Column="0" Grid.Row="0">Minutes</Label>
        <Label Grid.Column="0" Grid.Row="1">Seconds</Label>
        <Label Grid.Column="0" Grid.Row="2">Frames</Label>
        <TextBox Grid.Column="1" Grid.Row="0" Text="{Binding Minutes, UpdateSourceTrigger=PropertyChanged}" />
        <TextBox Grid.Column="1" Grid.Row="1" Text="{Binding Seconds, UpdateSourceTrigger=PropertyChanged}" />
        <TextBox Grid.Column="1" Grid.Row="2" Text="{Binding Frames, UpdateSourceTrigger=PropertyChanged}" />
      </Grid>
    </DataTemplate>

    <!-- ======== WaitAction Template ======== -->

    <DataTemplate x:Key="waitActionTemplate">
      <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Label Grid.Column="0" Grid.Row="0">Minutes</Label>
        <Label Grid.Column="0" Grid.Row="1">Seconds</Label>
        <Label Grid.Column="0" Grid.Row="2">Frames</Label>
        <TextBox Grid.Column="1" Grid.Row="0" Text="{Binding Minutes, UpdateSourceTrigger=PropertyChanged}" />
        <TextBox Grid.Column="1" Grid.Row="1" Text="{Binding Seconds, UpdateSourceTrigger=PropertyChanged}" />
        <TextBox Grid.Column="1" Grid.Row="2" Text="{Binding Frames, UpdateSourceTrigger=PropertyChanged}" />
        <TextBlock TextWrapping="WrapWithOverflow" Grid.Row="3" Grid.ColumnSpan="2">
            This action delays the excecution of actions that follow it.
        </TextBlock>
      </Grid>
    </DataTemplate>

    <!-- ======== GameEndedCondition Template ======== -->

    <DataTemplate x:Key="gameEndedConditionTemplate">
      <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"> This condition is met when the game ends.</TextBlock>
    </DataTemplate>

    <!-- ======== Sun Templates ======== -->

    <DataTemplate x:Key="sunriseTemplate">
      <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"> This action will cause the Sun to rise.</TextBlock>
    </DataTemplate>

    <DataTemplate x:Key="sunsetTemplate">
      <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"> This action will cause the Sun to set.</TextBlock>
    </DataTemplate>

    <!-- ======== PlayerDied Template ======== -->

    <DataTemplate x:Key="playerDiedConditionTemplate">
      <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <ListBox ItemsSource="{Binding Mission.Players, ElementName=window}" SelectedItem="{Binding Player}" />
        <GroupBox Grid.Row="1" Header="Description">
          <TextBlock TextWrapping="WrapWithOverflow">
            This condition is met when the selected player dies.
          </TextBlock>
        </GroupBox>
      </Grid>
    </DataTemplate>

    <!-- ======== Defeat Template ======== -->

    <DataTemplate x:Key="defeatActionTemplate">
      <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center">This action causes the game to end in a defeat.</TextBlock>
    </DataTemplate>

    <!-- ======== Victory Template ======== -->

    <DataTemplate x:Key="victoryActionTemplate">
      <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center">This action causes the game to end in a victory.</TextBlock>
    </DataTemplate>

    <!-- ======== Sound Template ======== -->

    <DataTemplate x:Key="soundTemplate">
      <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
        <DockPanel>
          <Label DockPanel.Dock="Left">Sound:</Label>
          <Button Loaded="SoundButtonLoaded" DockPanel.Dock="Right">Browse</Button>
          <TextBox Text="{Binding SoundPath}" />
        </DockPanel>
      </Grid>
    </DataTemplate>

    <!-- ======== GuiMessage Template ======== -->

    <DataTemplate x:Key="guiMessageTemplate">
      <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <GroupBox Header="Settings">
          <StackPanel>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
              </Grid.RowDefinitions>
              <Label>Message</Label>
              <TextBox Grid.Column="1" Text="{Binding Message, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True" MaxWidth="500"
                  MaxHeight="500" MinLines="3" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Visible" MaxLines="20"  />
              <Label Grid.Row="1">Pause Game</Label>
              <CheckBox Grid.Row="1" Grid.Column="1" IsChecked="{Binding Pause}" VerticalAlignment="Center" />
            </Grid>
            <DockPanel>
              <Label DockPanel.Dock="Left">Message Box Width:</Label>
              <Label DockPanel.Dock="Left" Content="{Binding Width, Mode=TwoWay}" />
              <Slider Minimum="0" Maximum="1000" Value="{Binding Width, Mode=TwoWay}" />
            </DockPanel>

            <Label>Image:</Label>
            <Viewbox Width="150" Height="150">
              <Grid>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" TextBlock.FontSize="12">?</TextBlock>
                <!--if the image is found, it will hide the question mark-->
                <Image Source="{Binding ImagePath}" />
              </Grid>
            </Viewbox>
            <Button Loaded="GuiMessageButtonLoaded" Tag="{Binding}">Select</Button>
          </StackPanel>
        </GroupBox>
        <GroupBox Grid.Row="1" Header="Description">
          <TextBlock TextWrapping="WrapWithOverflow">
                        This action displays a box with the message and/or the image. You can define any of the two, or both.
          </TextBlock>
        </GroupBox>
      </Grid>
    </DataTemplate>

    <!-- ======== UnitDestroyed Template ======== -->

    <DataTemplate x:Key="unitDestroyedTemplate">
      <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
        <GroupBox Header="Groups" VerticalAlignment="Center" HorizontalAlignment="Center">
          <ListBox ItemsSource="{Binding Mission.AllGroups, ElementName=window}" SelectionMode="Multiple" MaxHeight="200"
              Loaded="UnitDestroyedGroupsListLoaded" />
        </GroupBox>
        <GroupBox Header="Description">
          <TextBlock TextWrapping="WrapWithOverflow">
            This condition is met when a unit in any of the selected groups is destroyed.
            <LineBreak />
            You can add units to groups by editing the group column of the unit list in the Create Units display or by right-clicking on unit icons.
            <LineBreak />
            Separate multiple groups with commas and no spaces.
            <LineBreak />
            Units can be in multiple groups.
          </TextBlock>
        </GroupBox>
      </StackPanel>
    </DataTemplate>



    <!-- ======== Modify Score Template ======== -->

    <DataTemplate x:Key="modifyScoreTemplate">
      <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition />
          <RowDefinition />
          <RowDefinition />
        </Grid.RowDefinitions>
        <Label Grid.Row="0">Action</Label>
        <Label Grid.Row="1">Value</Label>
        <ComboBox Grid.Row="0" Grid.Column="1" ItemsSource="{x:Static Actions:ModifyScoreAction.Actions}" SelectedItem="{Binding Action}" />
        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding Value, UpdateSourceTrigger=PropertyChanged}" />
        <TextBlock Grid.Row="2" Grid.ColumnSpan="2">Scores are only sent when the Send Score action is executed.</TextBlock>
      </Grid>
    </DataTemplate>

    <!-- ======== Send Score Template ======== -->

    <DataTemplate x:Key="sendScoreTemplate">
      <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
        This action sends the player score to the central score server. Only the first score is sent.
      </TextBlock>
    </DataTemplate>

    <!-- ======== Dummy Templates ======== -->

    <DataTemplate x:Key="dummyTemplate">
      <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center">Select a condition or an action to start.</TextBlock>
    </DataTemplate>

    <!-- ======== Trigger Tree ======== -->

    <Style x:Key="groupButtonStyle" TargetType="local:DropDownButton">
      <Setter Property="FontSize" Value="9" />
      <EventSetter Event="Loaded" Handler="LogicButton_Loaded" />
      <Setter Property="DockPanel.Dock" Value="Right" />
      <Setter Property="Tag" Value="{Binding Name}" />
      <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <DataTemplate x:Key="triggerGroupTemplate">
      <Border Background="SteelBlue" Margin="3,5,-5,3" CornerRadius="5" Padding="3,3,7,3" Loaded="TriggerBarLoaded">
        <DockPanel>
          <local:DropDownButton Content="New" Style="{StaticResource groupButtonStyle}" />
          <TextBlock Text="{Binding Name.Name}" FontWeight="Bold" Foreground="White" VerticalAlignment="Center" />
        </DockPanel>
      </Border>
    </DataTemplate>

    <DataTemplate x:Key="conditionGroupTemplate">
      <Border Background="LightGreen" Margin="3,5,-5,3" CornerRadius="5" Padding="3,1,6,1">
        <DockPanel>
          <local:DropDownButton Content="New" Style="{StaticResource groupButtonStyle}" />
          <TextBlock Text="Conditions" FontWeight="Bold" Foreground="Black" VerticalAlignment="Center" />
        </DockPanel>
      </Border>
    </DataTemplate>

    <DataTemplate x:Key="actionGroupTemplate">
      <Border Background="Pink" Margin="3,5,-5,3" CornerRadius="5" Padding="3,1,6,1">
        <DockPanel>
          <local:DropDownButton Content="New" Style="{StaticResource groupButtonStyle}" />
          <TextBlock Text="Actions" FontWeight="Bold" Foreground="Black" VerticalAlignment="Center" />
        </DockPanel>
      </Border>
    </DataTemplate>

    <DataTemplate x:Key="logicItemTemplate">
      <Border x:Name="border" Background="LightBlue" Margin="1,0,-5,1" Padding="3,1,6,1" CornerRadius="5" HorizontalAlignment="Stretch"
          Loaded="LogicItemBarLoaded">
        <DockPanel>
          <TextBlock Text="{Binding Name}" Foreground="Black" VerticalAlignment="Center" />
        </DockPanel>
      </Border>
    </DataTemplate>

    <DataTemplate x:Key="selectedLogicItemTemplate">
      <Border x:Name="border" Background="LightBlue" Margin="1,0,-5,1" Padding="3,1,6,1" CornerRadius="10" HorizontalAlignment="Stretch"
          Height="50" Loaded="LogicItemBarLoaded">
        <DockPanel>
          <Button FontSize="9" Height="20" DockPanel.Dock="Right" Visibility="Collapsed">Remove</Button>
          <Viewbox Margin="5">
            <TextBlock Text="{Binding Name}" Foreground="Black" VerticalAlignment="Center" />
          </Viewbox>
        </DockPanel>
      </Border>
    </DataTemplate>

    <Style x:Key="logicItemStyle" TargetType="ListBoxItem">
      <Style.Setters>
        <Setter Property="ContentTemplate" Value="{StaticResource logicItemTemplate}" />
      </Style.Setters>
      <Style.Triggers>
        <Trigger Property="IsSelected" Value="true">
          <Setter Property="ContentTemplate" Value="{StaticResource selectedLogicItemTemplate}" />
        </Trigger>
        <DataTrigger Binding="{Binding Name}" Value="Dummy">
          <Setter Property="Height" Value="0" />
        </DataTrigger>
      </Style.Triggers>
    </Style>

    <Style x:Key="logicListBoxStyle">
      <Style.Resources>
        <!-- Background of selected item when focussed -->
        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
        <!-- Background of selected item when not focussed -->
        <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
      </Style.Resources>
    </Style>

    <!-- ======== End of  Resources ======== -->

  </Window.Resources>

  <DockPanel>
    <Menu Name="MainMenu" DockPanel.Dock="Top" x:FieldModifier="public">
    </Menu>
    <ad:DockingManager>
      <ad:ResizingPanel>
        <ad:DockablePane>
          <ad:DockableContent Title="Logic Item List" DockableStyle="Dockable">
            <DockPanel>
              <DockPanel DockPanel.Dock="Bottom">
                <Label DockPanel.Dock="Left">Map Zoom</Label>
                <Slider Name="zoomSlider" Minimum="0.01" Maximum="2" Value="1" />
              </DockPanel>
              <ListBox Name="logicGrid" ScrollViewer.HorizontalScrollBarVisibility="Disabled" x:FieldModifier="public"
                  Style="{StaticResource logicListBoxStyle}" ItemsSource="{Binding Source={StaticResource logicView}}"
                  IsSynchronizedWithCurrentItem="True" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Center"
                  ItemContainerStyle="{StaticResource logicItemStyle}">
                <ListBox.GroupStyle>
                  <GroupStyle HeaderTemplateSelector="{StaticResource logicGroupHeaderSelector}" />
                </ListBox.GroupStyle>
              </ListBox>
            </DockPanel>
          </ad:DockableContent>
        </ad:DockablePane>
        <Grid Background="White">
          <ContentControl Name="map" Content="{Binding ElementName=logicGrid, Path=SelectedItem, IsAsync=true}"
              ContentTemplateSelector="{StaticResource logicTemplateSelector}" Background="White" />
        </Grid>
      </ad:ResizingPanel>
    </ad:DockingManager>

  </DockPanel>
</Window>
